// Generated by CoffeeScript 1.9.0
(function() {
  var Octree, OctreeHelper, Vector;

  Vector = require('../primitives/Vector');

  Octree = require('../primitives/Octree');

  OctreeHelper = (function() {
    function OctreeHelper(_at_joinDistanceEpsilon) {
      this.joinDistanceEpsilon = _at_joinDistanceEpsilon;
      this.tree = new Octree(this.joinDistanceEpsilon);
      this.lastIndex = 0;
    }

    OctreeHelper.prototype.add = function(vertex, normal) {
      var vertexIndex;
      vertex = Vector.fromObject(vertex);
      normal = Vector.fromObject(normal).normalized();
      vertexIndex = this.tree.add(vertex, normal, this.lastIndex);
      if (vertexIndex > this.lastIndex) {
        this.lastIndex = vertexIndex;
      }
      return vertexIndex;
    };

    OctreeHelper.prototype.getVertexCoordinateList = function() {
      var vertexList;
      vertexList = new Array((this.lastIndex + 1) * 3);
      return this.tree.forEach(function(node) {
        var i;
        i = node.index * 3;
        vertexList[i] = node.vec.x;
        vertexList[i + 1] = node.vec.y;
        return vertexList[i + 2] = node.vec.z;
      });
    };

    OctreeHelper.prototype.getAveragedNormalList = function() {
      var averagedNormalList;
      averagedNormalList = new Array((this.lastIndex + 1) * 3);
      this.tree.forEach(function(node) {
        var avgNormal, i, normal, _i, _len, _ref;
        avgNormal = new Vector(0, 0, 0);
        _ref = node.normalList;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          normal = _ref[_i];
          avgNormal = avgNormal.add(normal);
        }
        avgNormal = avgNormal.normalized();
        i = node.index * 3;
        averagedNormalList[i] = avgNormal.x;
        averagedNormalList[i + 1] = avgNormal.y;
        return averagedNormalList[i + 2] = avgNormal.z;
      });
      return averagedNormalList;
    };

    return OctreeHelper;

  })();

  module.exports = OctreeHelper;

}).call(this);
