// Generated by CoffeeScript 1.9.0
(function() {
  var Octree;

  Octree = (function() {
    function Octree(_at_joinDistanceEpsilon) {
      this.joinDistanceEpsilon = _at_joinDistanceEpsilon;
      this.index = -1;
      this.vec = null;
      this.normalList = null;
      this.bxbybz = null;
      this.bxbysz = null;
      this.bxsybz = null;
      this.bxsysz = null;
      this.sxbybz = null;
      this.sxbysz = null;
      this.sxsybz = null;
      this.sxbysz = null;
    }

    Octree.prototype.forEach = function(callback) {
      var _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7;
      callback(this);
      if ((_ref = this.bxbybz) != null) {
        _ref.forEach(callback);
      }
      if ((_ref1 = this.bxbysz) != null) {
        _ref1.forEach(callback);
      }
      if ((_ref2 = this.bxsybz) != null) {
        _ref2.forEach(callback);
      }
      if ((_ref3 = this.bxsysz) != null) {
        _ref3.forEach(callback);
      }
      if ((_ref4 = this.sxbybz) != null) {
        _ref4.forEach(callback);
      }
      if ((_ref5 = this.sxbysz) != null) {
        _ref5.forEach(callback);
      }
      if ((_ref6 = this.sxsybz) != null) {
        _ref6.forEach(callback);
      }
      return (_ref7 = this.sxsysz) != null ? _ref7.forEach(callback) : void 0;
    };

    Octree.prototype.add = function(vertex, normal, biggestUsedIndex) {
      if (biggestUsedIndex == null) {
        biggestUsedIndex = 0;
      }
      if (this.vec == null) {
        return this._setVertex(vertex, normal, biggestUsedIndex);
      }
      if ((vertex.euclideanDistanceTo(this.vec)) < this.joinDistanceEpsilon) {
        return this._joinVertex(vertex, normal);
      }
      return this._addToSubtree(vertex, normal, biggestUsedIndex);
    };

    Octree.prototype._setVertex = function(vertex, normal, biggestUsedIndex) {
      this.vec = vertex;
      this.normalList = [];
      this.normalList.push(normal);
      return this.index = biggestUsedIndex + 1;
    };

    Octree.prototype._joinVertex = function(vertex, normal) {
      this.normalList.push(normal);
      return this.index;
    };

    Octree.prototype._addToSubtree = function(vertex, normal, biggestUsedIndex) {
      if (vertex.x > this.vec.x) {
        if (vertex.y > this.vec.y) {
          if (vertex.z > this.vec.z) {
            if (this.bxbybz == null) {
              this.bxbybz = new Octree(this.joinDistanceEpsilon);
            }
            return this.bxbybz.add(vertex, normal, biggestUsedIndex);
          } else {
            if (this.bxbysz == null) {
              this.bxbysz = new Octree(this.joinDistanceEpsilon);
            }
            return this.bxbysz.add(vertex, normal, biggestUsedIndex);
          }
        } else {
          if (vertex.z > this.vec.z) {
            if (this.bxsybz == null) {
              this.bxsybz = new Octree(this.joinDistanceEpsilon);
            }
            return this.bxsybz.add(vertex, normal, biggestUsedIndex);
          } else {
            if (this.bxsysz == null) {
              this.bxsysz = new Octree(this.joinDistanceEpsilon);
            }
            return this.bxsysz.add(vertex, normal, biggestUsedIndex);
          }
        }
      } else {
        if (vertex.y > this.vec.y) {
          if (vertex.z > this.vec.z) {
            if (this.sxbybz == null) {
              this.sxbybz = new Octree(this.joinDistanceEpsilon);
            }
            return this.sxbybz.add(vertex, normal, biggestUsedIndex);
          } else {
            if (this.sxbysz == null) {
              this.sxbysz = new Octree(this.joinDistanceEpsilon);
            }
            return this.sxbysz.add(vertex, normal, biggestUsedIndex);
          }
        } else {
          if (vertex.z > this.vec.z) {
            if (this.sxsybz == null) {
              this.sxsybz = new Octree(this.joinDistanceEpsilon);
            }
            return this.sxsybz.add(vertex, normal, biggestUsedIndex);
          } else {
            if (this.sxsysz == null) {
              this.sxsysz = new Octree(this.joinDistanceEpsilon);
            }
            return this.sxsysz.add(vertex, normal, biggestUsedIndex);
          }
        }
      }
    };

    return Octree;

  })();

  module.exports = Octree;

}).call(this);
