// Generated by CoffeeScript 1.9.0
(function() {
  var Model, ModelPromise,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Model = require('./Model');

  ModelPromise = (function() {
    function ModelPromise(mesh, options) {
      this["catch"] = __bind(this["catch"], this);
      this.done = __bind(this.done, this);
      this.next = __bind(this.next, this);
      this.isTwoManifold = __bind(this.isTwoManifold, this);
      this.getSubmodels = __bind(this.getSubmodels, this);
      this.calculateNormals = __bind(this.calculateNormals, this);
      this.fixFaces = __bind(this.fixFaces, this);
      this.buildFaceVertexMesh = __bind(this.buildFaceVertexMesh, this);
      this.setFaces = __bind(this.setFaces, this);
      this.ready = Promise.resolve().then((function(_this) {
        return function() {
          return _this.model = new Model(mesh, options);
        };
      })(this));
      return this;
    }

    ModelPromise.prototype.setFaces = function(faces) {
      return this.next((function(_this) {
        return function() {
          return _this.model.setFaces(faces);
        };
      })(this));
    };

    ModelPromise.prototype.buildFaceVertexMesh = function() {
      return this.next((function(_this) {
        return function() {
          return _this.model.buildFaceVertexMesh();
        };
      })(this));
    };

    ModelPromise.prototype.fixFaces = function() {
      return this.next((function(_this) {
        return function() {
          return _this.model.fixFaces();
        };
      })(this));
    };

    ModelPromise.prototype.calculateNormals = function() {
      return this.next((function(_this) {
        return function() {
          return _this.model.calculateNormals();
        };
      })(this));
    };

    ModelPromise.prototype.getSubmodels = function() {
      return this.done((function(_this) {
        return function() {
          return _this.model.getSubmodels();
        };
      })(this));
    };

    ModelPromise.prototype.isTwoManifold = function() {
      return this.done((function(_this) {
        return function() {
          return _this.model.isTwoManifold();
        };
      })(this));
    };

    ModelPromise.prototype.next = function(onFulfilled, onRejected) {
      this.done(onFulfilled, onRejected);
      return this;
    };

    ModelPromise.prototype.done = function(onFulfilled, onRejected) {
      var onFulfilledTemp;
      onFulfilledTemp = (function(_this) {
        return function() {
          return typeof onFulfilled === "function" ? onFulfilled(_this.model) : void 0;
        };
      })(this);
      this.ready = this.ready.then(onFulfilledTemp, onRejected);
      return this.ready;
    };

    ModelPromise.prototype["catch"] = function(onRejected) {
      this.ready = this.ready["catch"](onRejected);
      return this.ready;
    };

    return ModelPromise;

  })();

  module.exports = ModelPromise;

}).call(this);
