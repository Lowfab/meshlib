// Generated by CoffeeScript 1.9.0
(function() {
  var saveAs, saveAsAsciiStl, saveAsBinaryStl, toAsciiStl, toBinaryStl;

  if (typeof window === !'undefined') {
    saveAs = require('filesaver.js');
  }

  toAsciiStl = function(model) {
    var faceNormals, i, indices, originalFileName, positions, stl, stringifyFaceNormal, stringifyVector, _i, _ref;
    faceNormals = model.facesNormals, indices = model.facesVerticesIndices, positions = model.verticesCoordinates, originalFileName = model.originalFileName;
    stringifyFaceNormal = function(i) {
      return faceNormals[i] + ' ' + faceNormals[i + 1] + ' ' + faceNormals[i + 2];
    };
    stringifyVector = function(i) {
      return positions[i * 3] + ' ' + positions[(i * 3) + 1] + ' ' + positions[(i * 3) + 2];
    };
    stl = "solid " + originalFileName + "\n";
    for (i = _i = 0, _ref = indices.length; _i < _ref; i = _i += 3) {
      stl += ("facet normal " + (stringifyFaceNormal(i)) + "\n") + '\touter loop\n' + ("\t\tvertex " + (stringifyVector(indices[i])) + "\n") + ("\t\tvertex " + (stringifyVector(indices[i + 1])) + "\n") + ("\t\tvertex " + (stringifyVector(indices[i + 2])) + "\n") + '\tendloop\n' + 'endfacet\n';
    }
    stl += "endsolid " + originalFileName + "\n";
    return new Blob([stl], {
      type: 'text/plain;charset=utf-8'
    });
  };

  toBinaryStl = function(model) {
    var a, attributeByteCountLength, buffer, bufferLength, contentLength, dataView, faceNormals, facetLength, facetsCounterLength, headerLength, i, indices, le, offset, positions, vectorLength, _i, _j, _ref;
    faceNormals = model.facesNormals, indices = model.facesVerticesIndices, positions = model.verticesCoordinates;
    headerLength = 80;
    facetsCounterLength = 4;
    vectorLength = 12;
    attributeByteCountLength = 2;
    facetLength = vectorLength * 4 + attributeByteCountLength;
    contentLength = (indices.length / 3) * facetLength;
    bufferLength = headerLength + facetsCounterLength + contentLength;
    buffer = new ArrayBuffer(bufferLength);
    dataView = new DataView(buffer, headerLength);
    le = true;
    dataView.setUint32(0, indices.length / 3, le);
    offset = facetsCounterLength;
    for (i = _i = 0, _ref = indices.length; _i < _ref; i = _i += 3) {
      dataView.setFloat32(offset, faceNormals[i], le);
      dataView.setFloat32(offset += 4, faceNormals[i + 1], le);
      dataView.setFloat32(offset += 4, faceNormals[i + 2], le);
      for (a = _j = 0; _j <= 2; a = ++_j) {
        dataView.setFloat32(offset += 4, positions[indices[i + a] * 3], le);
        dataView.setFloat32(offset += 4, positions[indices[i + a] * 3 + 1], le);
        dataView.setFloat32(offset += 4, positions[indices[i + a] * 3 + 2], le);
      }
      dataView.setUint16(offset += 4, 0, le);
      offset += 2;
    }
    return new Blob([buffer]);
  };

  saveAsBinaryStl = (function(_this) {
    return function(model) {
      return saveAs(toBinaryStl(model), model.fileName);
    };
  })(this);

  saveAsAsciiStl = (function(_this) {
    return function(model) {
      return saveAs(toAsciiStl(model), model.fileName);
    };
  })(this);

  module.exports = {
    toAsciiStl: toAsciiStl,
    toBinaryStl: toBinaryStl,
    saveAsBinaryStl: saveAsBinaryStl,
    saveAsAsciiStl: saveAsAsciiStl
  };

}).call(this);
