// Generated by CoffeeScript 1.9.0
(function() {
  var Octree;

  Octree = (function() {
    function Octree(_at_distanceDelta) {
      this.distanceDelta = _at_distanceDelta;
      this.index = -1;
      this.vec = null;
      this.normalList = null;
      this.bxbybz = null;
      this.bxbysz = null;
      this.bxsybz = null;
      this.bxsysz = null;
      this.sxbybz = null;
      this.sxbysz = null;
      this.sxsybz = null;
      this.sxbysz = null;
    }

    Octree.prototype.forEach = function(callback) {
      callback(this);
      if (this.bxbybz != null) {
        this.bxbybz.forEach(callback);
      }
      if (this.bxbysz != null) {
        this.bxbysz.forEach(callback);
      }
      if (this.bxsybz != null) {
        this.bxsybz.forEach(callback);
      }
      if (this.bxsysz != null) {
        this.bxsysz.forEach(callback);
      }
      if (this.sxbybz != null) {
        this.sxbybz.forEach(callback);
      }
      if (this.sxbysz != null) {
        this.sxbysz.forEach(callback);
      }
      if (this.sxsybz != null) {
        this.sxsybz.forEach(callback);
      }
      if (this.sxsysz != null) {
        return this.sxsysz.forEach(callback);
      }
    };

    Octree.prototype.add = function(point, normal, biggestUsedIndex) {
      if (biggestUsedIndex == null) {
        biggestUsedIndex = 0;
      }
      if (this.vec === null) {
        this.vec = point;
        this.normalList = [];
        this.normalList.push(normal);
        this.index = biggestUsedIndex + 1;
        return this.index;
      } else if ((point.euclideanDistanceTo(this.vec)) < this.distanceDelta) {
        this.normalList.push(normal);
        return this.index;
      } else {
        if (point.x > this.vec.x) {
          if (point.y > this.vec.y) {
            if (point.z > this.vec.z) {
              if (!(this.bxbybz != null)) {
                this.bxbybz = new Octree(this.distanceDelta);
              }
              return this.bxbybz.add(point, normal, biggestUsedIndex);
            } else {
              if (!(this.bxbysz != null)) {
                this.bxbysz = new Octree(this.distanceDelta);
              }
              return this.bxbysz.add(point, normal, biggestUsedIndex);
            }
          } else {
            if (point.z > this.vec.z) {
              if (!(this.bxsybz != null)) {
                this.bxsybz = new Octree(this.distanceDelta);
              }
              return this.bxsybz.add(point, normal, biggestUsedIndex);
            } else {
              if (!(this.bxsysz != null)) {
                this.bxsysz = new Octree(this.distanceDelta);
              }
              return this.bxsysz.add(point, normal, biggestUsedIndex);
            }
          }
        } else {
          if (point.y > this.vec.y) {
            if (point.z > this.vec.z) {
              if (!(this.sxbybz != null)) {
                this.sxbybz = new Octree(this.distanceDelta);
              }
              return this.sxbybz.add(point, normal, biggestUsedIndex);
            } else {
              if (!(this.sxbysz != null)) {
                this.sxbysz = new Octree(this.distanceDelta);
              }
              return this.sxbysz.add(point, normal, biggestUsedIndex);
            }
          } else {
            if (point.z > this.vec.z) {
              if (!(this.sxsybz != null)) {
                this.sxsybz = new Octree(this.distanceDelta);
              }
              return this.sxsybz.add(point, normal, biggestUsedIndex);
            } else {
              if (!(this.sxsysz != null)) {
                this.sxsysz = new Octree(this.distanceDelta);
              }
              return this.sxsysz.add(point, normal, biggestUsedIndex);
            }
          }
        }
      }
    };

    return Octree;

  })();

  module.exports = Octree;

}).call(this);
