// Generated by CoffeeScript 1.9.0
(function() {
  var OptimizedModel, THREE, base64ByteLength, stringToUint8Array,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  THREE = require('three');

  base64ByteLength = function(base64Length) {
    return (base64Length / 4) * 3;
  };

  stringToUint8Array = function(str) {
    var ab, i, uintarray, _i, _ref;
    ab = new ArrayBuffer(str.length);
    uintarray = new Uint8Array(ab);
    for (i = _i = 0, _ref = str.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
      uintarray[i] = str.charCodeAt(i);
    }
    return uintarray;
  };

  OptimizedModel = (function() {
    function OptimizedModel() {
      this.forEachFace = __bind(this.forEachFace, this);
      this.fromThreeGeometry = __bind(this.fromThreeGeometry, this);
      this.verticesCoordinates = [];
      this.facesVerticesIndices = [];
      this.verticesNormals = [];
      this.facesNormals = [];
      this.originalFileName = 'Unknown file';
    }

    OptimizedModel.prototype.toBase64 = function() {
      var baseString, fnA, fnBase, i, indA, indBase, posA, posBase, vnA, vnBase, _i, _j, _k, _l, _ref, _ref1, _ref2, _ref3;
      posA = new Float32Array(this.verticesCoordinates.length);
      for (i = _i = 0, _ref = this.verticesCoordinates.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        posA[i] = this.verticesCoordinates[i];
      }
      indA = new Int32Array(this.facesVerticesIndices.length);
      for (i = _j = 0, _ref1 = this.facesVerticesIndices.length - 1; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; i = 0 <= _ref1 ? ++_j : --_j) {
        indA[i] = this.facesVerticesIndices[i];
      }
      vnA = new Float32Array(this.verticesNormals.length);
      for (i = _k = 0, _ref2 = this.verticesNormals.length - 1; 0 <= _ref2 ? _k <= _ref2 : _k >= _ref2; i = 0 <= _ref2 ? ++_k : --_k) {
        vnA[i] = this.verticesNormals[i];
      }
      fnA = new Float32Array(this.facesNormals.length);
      for (i = _l = 0, _ref3 = this.facesNormals.length - 1; 0 <= _ref3 ? _l <= _ref3 : _l >= _ref3; i = 0 <= _ref3 ? ++_l : --_l) {
        fnA[i] = this.facesNormals[i];
      }
      posBase = this.arrayBufferToBase64(posA.buffer);
      baseString = posBase;
      baseString += '|';
      indBase = this.arrayBufferToBase64(indA.buffer);
      baseString += indBase;
      baseString += '|';
      vnBase = this.arrayBufferToBase64(vnA.buffer);
      baseString += vnBase;
      baseString += '|';
      fnBase = this.arrayBufferToBase64(fnA.buffer);
      baseString += fnBase;
      baseString += '|' + this.originalFileName;
      return baseString;
    };

    OptimizedModel.prototype.fromBase64 = function(base64String) {
      var strArray;
      strArray = base64String.split('|');
      this.verticesCoordinates = this.base64ToFloat32Array(strArray[0]);
      this.facesVerticesIndices = new this.base64ToInt32Array(strArray[1]);
      this.verticesNormals = this.base64ToFloat32Array(strArray[2]);
      this.facesNormals = this.base64ToFloat32Array(strArray[3]);
      return this.originalFileName = strArray[4];
    };

    OptimizedModel.prototype.base64ToFloat32Array = function(b64) {
      var decoded, i, numFloats, pview, result, _i, _ref;
      numFloats = (base64ByteLength(b64.length)) / 4;
      result = new Float32Array(numFloats);
      decoded = stringToUint8Array(atob(b64));
      pview = new DataView(decoded.buffer);
      for (i = _i = 0, _ref = numFloats - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        result[i] = pview.getFloat32(i * 4, true);
      }
      return result;
    };

    OptimizedModel.prototype.base64ToInt32Array = function(b64) {
      var decoded, i, numInts, pview, result, _i, _ref;
      numInts = (base64ByteLength(b64.length)) / 4;
      result = new Int32Array(numInts);
      decoded = stringToUint8Array(atob(b64));
      pview = new DataView(decoded.buffer);
      for (i = _i = 0, _ref = numInts - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        result[i] = pview.getInt32(i * 4, true);
      }
      return result;
    };

    OptimizedModel.prototype.arrayBufferToBase64 = function(buffer) {
      var binary, bytes, i, len, _i, _ref;
      binary = '';
      bytes = new Uint8Array(buffer);
      len = bytes.byteLength;
      for (i = _i = 0, _ref = len - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        binary += String.fromCharCode(bytes[i]);
      }
      return window.btoa(binary);
    };

    OptimizedModel.prototype.convertToThreeGeometry = function(bufferGeometry) {
      if (bufferGeometry == null) {
        bufferGeometry = false;
      }
      if (bufferGeometry) {
        return this.createBufferGeometry();
      } else {
        return this.createStandardGeometry();
      }
    };

    OptimizedModel.prototype.createBufferGeometry = function() {
      var geometry, i, iarray, narray, parray, _i, _j, _k, _ref, _ref1, _ref2;
      geometry = new THREE.BufferGeometry();
      parray = new Float32Array(this.verticesCoordinates.length);
      for (i = _i = 0, _ref = this.verticesCoordinates.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        parray[i] = this.verticesCoordinates[i];
      }
      narray = new Float32Array(this.verticesNormals.length);
      for (i = _j = 0, _ref1 = this.verticesNormals.length - 1; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; i = 0 <= _ref1 ? ++_j : --_j) {
        narray[i] = this.verticesNormals[i];
      }
      iarray = new Uint32Array(this.facesVerticesIndices.length);
      for (i = _k = 0, _ref2 = this.facesVerticesIndices.length - 1; 0 <= _ref2 ? _k <= _ref2 : _k >= _ref2; i = 0 <= _ref2 ? ++_k : --_k) {
        iarray[i] = this.facesVerticesIndices[i];
      }
      geometry.addAttribute('index', new THREE.BufferAttribute(iarray, 1));
      geometry.addAttribute('position', new THREE.BufferAttribute(parray, 3));
      geometry.addAttribute('normal', new THREE.BufferAttribute(narray, 3));
      geometry.computeBoundingSphere();
      return geometry;
    };

    OptimizedModel.prototype.createStandardGeometry = function() {
      var fi, geometry, vi, _i, _j, _ref, _ref1;
      geometry = new THREE.Geometry();
      for (vi = _i = 0, _ref = this.verticesCoordinates.length - 1; _i <= _ref; vi = _i += 3) {
        geometry.verticesCoordinates.push(new THREE.Vector3(this.verticesCoordinates[vi], this.verticesCoordinates[vi + 1], this.verticesCoordinates[vi + 2]));
      }
      for (fi = _j = 0, _ref1 = this.facesVerticesIndices.length - 1; _j <= _ref1; fi = _j += 3) {
        geometry.faces.push(new THREE.Face3(this.facesVerticesIndices[fi], this.facesVerticesIndices[fi + 1], this.facesVerticesIndices[fi + 2], new THREE.Vector3(this.facesNormals[fi], this.facesNormals[fi + 1], this.facesNormals[fi + 2])));
      }
      return geometry;
    };

    OptimizedModel.prototype.fromThreeGeometry = function(threeGeometry, originalFileName) {
      var face, vertex, _i, _j, _len, _len1, _ref, _ref1, _results;
      if (originalFileName == null) {
        originalFileName = 'Three.Geometry';
      }
      this.verticesCoordinates = [];
      this.facesVerticesIndices = [];
      this.facesNormals = [];
      this.verticesNormals = [];
      this.originalFileName = originalFileName;
      _ref = threeGeometry.verticesCoordinates;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        vertex = _ref[_i];
        this.verticesCoordinates.push(vertex.x);
        this.verticesCoordinates.push(vertex.y);
        this.verticesCoordinates.push(vertex.z);
      }
      _ref1 = threeGeometry.faces;
      _results = [];
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        face = _ref1[_j];
        this.facesVerticesIndices.push(face.a);
        this.facesVerticesIndices.push(face.b);
        this.facesVerticesIndices.push(face.c);
        this.facesNormals.push(face.normal.x);
        this.facesNormals.push(face.normal.y);
        _results.push(this.facesNormals.push(face.normal.z));
      }
      return _results;
    };

    OptimizedModel.prototype.boundingBox = function() {
      var i, maxX, maxY, maxZ, minX, minY, minZ, _i, _ref;
      if (this._boundingBox) {
        return this._boundingBox;
      }
      minX = maxX = this.verticesCoordinates[0];
      minY = maxY = this.verticesCoordinates[1];
      minZ = maxZ = this.verticesCoordinates[2];
      for (i = _i = 0, _ref = this.verticesCoordinates.length - 1; _i <= _ref; i = _i += 3) {
        if (this.verticesCoordinates[i] < minX) {
          minX = this.verticesCoordinates[i];
        }
        if (this.verticesCoordinates[i + 1] < minY) {
          minY = this.verticesCoordinates[i + 1];
        }
        if (this.verticesCoordinates[i + 2] < minZ) {
          minZ = this.verticesCoordinates[i + 2];
        }
        if (this.verticesCoordinates[i] > maxX) {
          maxX = this.verticesCoordinates[i];
        }
        if (this.verticesCoordinates[i + 1] > maxY) {
          maxY = this.verticesCoordinates[i + 1];
        }
        if (this.verticesCoordinates[i + 2] > maxZ) {
          maxZ = this.verticesCoordinates[i + 2];
        }
      }
      this._boundingBox = {
        min: {
          x: minX,
          y: minY,
          z: minZ
        },
        max: {
          x: maxX,
          y: maxY,
          z: maxZ
        }
      };
      return this._boundingBox;
    };

    OptimizedModel.prototype.forEachFace = function(callback) {
      var i, n, p0, p1, p2, _i, _ref, _results;
      _results = [];
      for (i = _i = 0, _ref = this.facesVerticesIndices.length - 1; _i <= _ref; i = _i += 3) {
        p0 = {
          x: this.verticesCoordinates[this.facesVerticesIndices[i] * 3],
          y: this.verticesCoordinates[this.facesVerticesIndices[i] * 3 + 1],
          z: this.verticesCoordinates[this.facesVerticesIndices[i] * 3 + 2]
        };
        p1 = {
          x: this.verticesCoordinates[this.facesVerticesIndices[i + 1] * 3],
          y: this.verticesCoordinates[this.facesVerticesIndices[i + 1] * 3 + 1],
          z: this.verticesCoordinates[this.facesVerticesIndices[i + 1] * 3 + 2]
        };
        p2 = {
          x: this.verticesCoordinates[this.facesVerticesIndices[i + 2] * 3],
          y: this.verticesCoordinates[this.facesVerticesIndices[i + 2] * 3 + 1],
          z: this.verticesCoordinates[this.facesVerticesIndices[i + 2] * 3 + 2]
        };
        n = {
          x: this.facesNormals[i],
          y: this.facesNormals[i + 1],
          z: this.facesNormals[i + 2]
        };
        _results.push(callback(p0, p1, p2, n));
      }
      return _results;
    };

    return OptimizedModel;

  })();

  module.exports = OptimizedModel;

}).call(this);
